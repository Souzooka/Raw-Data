OK so, .DAT files are fairly simple collections of files -- there is a header, and then all the files are listed out, no changes at all, easy stuff.

That being said there are four possible variants that .DAT files can fall under:

1. Raw Danger .DAT w/ external .FAT;
2. Raw Danger .DAT w/ internal .FAT;
3. Generic IREM .DAT w/ external .FAT;
4. Generic IREM .DAT w/ internal .FAT;

I should note that the .FAT file represents the header for the .DAT file. That being said, the only difference between internal end external .FAT files is that it's either included in the .DAT file, or it is its own separate file. All pointers behave the same either way. Raw Danger .DATs (maybe some other games?) do not include a padding between their pointers.

e.g:

A part of the pointer table for a Raw Danger .FAT might look like this:

B0370000 58010000 B0890000 F0580000
7A010000 A0E20000 803C0000 9F010000

And for the older IREM .FATs:

B0370000 00000000 58010000 00000000
B0890000 0000000E F0580000 00000002
7A010000 0000000F A0E20000 00000003
803C0000 00000002 9F010000 0000000D

(or something along those lines)

There may be a tell in the files themselves if they are the older version rather than the table itself, but I have to doublecheck.

Here's some specific notes about the header of the file chosen for testing, for reference:

0x0h:    File extension string (if this is "FAT " then we know it is a header in the .DAT we are reading)
0x4h:    Integer representing the number of files included in this .DAT (in this case, this file only contains 4 other files)
0xF4h:   ??
0xF8h:   Pointer for start of filename data (this address seems to be consistent in every .FAT)
0xFCh:   Pointer for 1st file and/or file offset
0x104h:  Pointer for 2nd file (remember there is an offset, e.g. 0052 becomes 5200 + 1D0 = 53D0)
0x108h:  Pointer for 1st file and/or file offset
0x10Ch:  Pointer for 2nd file
0x110h:  ??
0x114h:  Pointer for 2nd filename
0x118h:  Pointer for 3rd file
0x11Ch:  ??
0x120h:  Pointer for 3rd filename
0x124h:  Pointer for 4th file
0x128h:  ??
0x12Ch:  Pointer for 4th filename
0x130h:  Filenames start
0x1D0h:  Files start (this would be EOF for .FATs)





